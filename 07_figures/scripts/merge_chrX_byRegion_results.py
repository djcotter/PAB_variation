"""
merge_chrX_byRegion_results.py
Daniel Cotter

takes the results of the byRegion window analysis and combines all POPS into
a single easy-to-read table
-------------------------------------------------------------------------------

"""

# import required packages ----------------------------------------------------
import sys
import pandas as pd
import argparse
import os

# Parse arguments from the command line
parser = argparse.ArgumentParser(description="Merge byRegion window results.")

parser.add_argument('--region_files', nargs='+', required=True,
                    help='list of input files to be merged into one table')
parser.add_argument('--output', nargs='?', default=sys.stdout,
                    help='Path to plain text output file. Default is stdout')
parser.add_argument('--stylized_output', action='store_true',
                    help='path to a stylized table. Not generated by default')

args = parser.parse_args()

# Read files into multiple pandas data frames
tables = []
for item in args.region_files:
    tables.append([os.path.basename(item)[0:3],
                   pd.read_csv(item, delimiter='\t', header=None)])

# Start building the merged dataframe
newdf = tables[0][1][[0, 1, 2]].copy()
newdf.loc[-1] = ["", "", ""]
newdf.index = newdf.index + 1
newdf = newdf.sort_index()

# loop through all tables and grab just the diversity column
for t in tables:
    tempdf = t[1][[3]].copy()
    tempdf.loc[-1] = t[0]
    tempdf.index = tempdf.index + 1
    tempdf = tempdf.sort_index()

    newdf = pd.concat([newdf, tempdf], axis=1)

# write the results as a csv file
newdf.to_csv(args.output, sep='\t', header=None, index=None)

# if stylized output is provided, output the image of a table
# if args.stylized_output is not False:
